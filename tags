!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES_DECRYPT	include/aes.h	55;"	d
AES_ENCRYPT	include/aes.h	54;"	d
AES_FROUND	src/aes.c	619;"	d	file:
AES_RROUND	src/aes.c	642;"	d	file:
BLK_LENGTH	include/config.h	18;"	d
BLK_NUMBER	include/config.h	17;"	d
CC	makefile	/^CC = \/usr\/bin\/gcc$/;"	m
CETD_128_CETD_h	include/CETD.h	10;"	d
CETD_128_permutation_h	include/permutation.h	10;"	d
CETD_internal_cipher_h	include/cipher.h	10;"	d
CETD_internal_input_h	include/input.h	10;"	d
CETD_tag_generation	src/CETD.c	/^void CETD_tag_generation(const uchar **data, uchar *nonce_input,  aes_context a_ctx,int r, int s,  FILE *x,FILE *y1[Y_NUMBER], FILE *y2[Y_NUMBER], FILE *CETD_tag, FILE *CETD_nonce,bool file_type)$/;"	f
CSV_file	include/config.h	20;"	d
FSb	src/aes.c	/^static const unsigned char FSb[256] =$/;"	v	file:
FSb	src/aes.c	/^static unsigned char FSb[256];$/;"	v	file:
FT	src/aes.c	114;"	d	file:
FT	src/aes.c	197;"	d	file:
FT0	src/aes.c	/^static const uint32_t FT0[256] = { FT };$/;"	v	file:
FT0	src/aes.c	/^static uint32_t FT0[256]; $/;"	v	file:
FT1	src/aes.c	/^static const uint32_t FT1[256] = { FT };$/;"	v	file:
FT1	src/aes.c	/^static uint32_t FT1[256]; $/;"	v	file:
FT2	src/aes.c	/^static const uint32_t FT2[256] = { FT };$/;"	v	file:
FT2	src/aes.c	/^static uint32_t FT2[256]; $/;"	v	file:
FT3	src/aes.c	/^static const uint32_t FT3[256] = { FT };$/;"	v	file:
FT3	src/aes.c	/^static uint32_t FT3[256]; $/;"	v	file:
GCCFLAGS	makefile	/^GCCFLAGS = -c -Wall -g --std=c99$/;"	m
GCM_config_h	include/config.h	10;"	d
GET_UINT32_LE	src/aes.c	47;"	d	file:
LC_BOUND	src/input.c	19;"	d	file:
MUL	src/aes.c	366;"	d	file:
OBJ	makefile	/^OBJ = $(OBJDIR)\/run.o \\$/;"	m
OBJDIR	makefile	/^OBJDIR = $(ROOTDIR)\/obj$/;"	m
PADLOCK_ACE	include/padlock.h	49;"	d
PADLOCK_ALIGN16	include/padlock.h	53;"	d
PADLOCK_PHE	include/padlock.h	50;"	d
PADLOCK_PMM	include/padlock.h	51;"	d
PADLOCK_RNG	include/padlock.h	48;"	d
PERIODIC	src/cipher.c	15;"	d	file:
PERIODIC	src/input.c	17;"	d	file:
POLARSSL_AES_C	include/config.h	49;"	d
POLARSSL_AES_H	include/aes.h	28;"	d
POLARSSL_CIPHER_MODE_CFB	include/aes.h	36;"	d
POLARSSL_CIPHER_MODE_CTR	include/aes.h	43;"	d
POLARSSL_ERR_AES_INVALID_INPUT_LENGTH	include/aes.h	58;"	d
POLARSSL_ERR_AES_INVALID_KEY_LENGTH	include/aes.h	57;"	d
POLARSSL_ERR_PADLOCK_DATA_MISALIGNED	include/padlock.h	32;"	d
POLARSSL_GCM_C	include/config.h	75;"	d
POLARSSL_HAVE_X86	include/padlock.h	37;"	d
POLARSSL_PADLOCK_C	include/config.h	60;"	d
POLARSSL_PADLOCK_H	include/padlock.h	28;"	d
POLARSSL_SELF_TEST	include/config.h	81;"	d
PUT_UINT32_LE	src/aes.c	57;"	d	file:
RCON	src/aes.c	/^static const uint32_t RCON[10] =$/;"	v	file:
RCON	src/aes.c	/^static uint32_t RCON[10];$/;"	v	file:
ROOTDIR	makefile	/^ROOTDIR = .$/;"	m
ROTL8	src/aes.c	364;"	d	file:
RSb	src/aes.c	/^static const unsigned char RSb[256] =$/;"	v	file:
RSb	src/aes.c	/^static unsigned char RSb[256];$/;"	v	file:
RT	src/aes.c	241;"	d	file:
RT	src/aes.c	324;"	d	file:
RT0	src/aes.c	/^static const uint32_t RT0[256] = { RT };$/;"	v	file:
RT0	src/aes.c	/^static uint32_t RT0[256];$/;"	v	file:
RT1	src/aes.c	/^static const uint32_t RT1[256] = { RT };$/;"	v	file:
RT1	src/aes.c	/^static uint32_t RT1[256];$/;"	v	file:
RT2	src/aes.c	/^static const uint32_t RT2[256] = { RT };$/;"	v	file:
RT2	src/aes.c	/^static uint32_t RT2[256];$/;"	v	file:
RT3	src/aes.c	/^static const uint32_t RT3[256] = { RT };$/;"	v	file:
RT3	src/aes.c	/^static uint32_t RT3[256];$/;"	v	file:
Reverse	src/array_shift.c	/^void Reverse(char *arr, int b, int e)$/;"	f
RightShift	src/array_shift.c	/^void RightShift(char *arr, int N, int k)$/;"	f
SEG_BITS	include/shuffle.h	5;"	d
SHIFT_P	include/permutation.h	12;"	d
SHIFT_P_P	include/permutation.h	13;"	d
SHUFFLE_P	include/permutation.h	14;"	d
SHUFFLE_P	include/shuffle.h	4;"	d
SRCDIR	makefile	/^SRCDIR = $(ROOTDIR)\/src$/;"	m
TAG_LENGTH	include/config.h	23;"	d
TXT_file	include/config.h	21;"	d
V	src/aes.c	181;"	d	file:
V	src/aes.c	183;"	d	file:
V	src/aes.c	185;"	d	file:
V	src/aes.c	187;"	d	file:
V	src/aes.c	189;"	d	file:
V	src/aes.c	191;"	d	file:
V	src/aes.c	193;"	d	file:
V	src/aes.c	195;"	d	file:
V	src/aes.c	308;"	d	file:
V	src/aes.c	310;"	d	file:
V	src/aes.c	312;"	d	file:
V	src/aes.c	314;"	d	file:
V	src/aes.c	316;"	d	file:
V	src/aes.c	318;"	d	file:
V	src/aes.c	320;"	d	file:
V	src/aes.c	322;"	d	file:
VPATH	makefile	/^VPATH = src:obj:include $/;"	m
XTIME	src/aes.c	365;"	d	file:
X_generation_show_h	include/show.h	10;"	d
Y_NUMBER	include/CETD.h	17;"	d
Y_SINGLE	src/CETD.c	16;"	d	file:
a	mod.py	/^a = 1%4$/;"	v
aes_context	include/aes.h	/^aes_context;$/;"	t	typeref:struct:__anon1
aes_context	include/aes.h	/^aes_context;$/;"	t	typeref:struct:__anon2
aes_crypt_cbc	src/aes.c	/^int aes_crypt_cbc( aes_context *ctx,$/;"	f
aes_crypt_cfb128	src/aes.c	/^int aes_crypt_cfb128( aes_context *ctx,$/;"	f
aes_crypt_ctr	src/aes.c	/^int aes_crypt_ctr( aes_context *ctx,$/;"	f
aes_crypt_ecb	src/aes.c	/^int aes_crypt_ecb( aes_context *ctx,$/;"	f
aes_gen_tables	src/aes.c	/^static void aes_gen_tables( void )$/;"	f	file:
aes_init_done	src/aes.c	/^static int aes_init_done = 0;$/;"	v	file:
aes_padlock_ace	src/aes.c	/^static int aes_padlock_ace = -1;$/;"	v	file:
aes_self_test	src/aes.c	/^int aes_self_test( int verbose )$/;"	f
aes_setkey_dec	src/aes.c	/^int aes_setkey_dec( aes_context *ctx, const unsigned char *key, unsigned int keysize )$/;"	f
aes_setkey_enc	src/aes.c	/^int aes_setkey_enc( aes_context *ctx, const unsigned char *key, unsigned int keysize )$/;"	f
aes_test_cbc_dec	src/aes.c	/^static const unsigned char aes_test_cbc_dec[3][16] =$/;"	v	file:
aes_test_cbc_enc	src/aes.c	/^static const unsigned char aes_test_cbc_enc[3][16] =$/;"	v	file:
aes_test_cfb128_ct	src/aes.c	/^static const unsigned char aes_test_cfb128_ct[3][64] =$/;"	v	file:
aes_test_cfb128_iv	src/aes.c	/^static const unsigned char aes_test_cfb128_iv[16] =$/;"	v	file:
aes_test_cfb128_key	src/aes.c	/^static const unsigned char aes_test_cfb128_key[3][32] =$/;"	v	file:
aes_test_cfb128_pt	src/aes.c	/^static const unsigned char aes_test_cfb128_pt[64] =$/;"	v	file:
aes_test_ctr_ct	src/aes.c	/^static const unsigned char aes_test_ctr_ct[3][48] =$/;"	v	file:
aes_test_ctr_key	src/aes.c	/^static const unsigned char aes_test_ctr_key[3][16] =$/;"	v	file:
aes_test_ctr_len	src/aes.c	/^static const int aes_test_ctr_len[3] =$/;"	v	file:
aes_test_ctr_nonce_counter	src/aes.c	/^static const unsigned char aes_test_ctr_nonce_counter[3][16] =$/;"	v	file:
aes_test_ctr_pt	src/aes.c	/^static const unsigned char aes_test_ctr_pt[3][48] =$/;"	v	file:
aes_test_ecb_dec	src/aes.c	/^static const unsigned char aes_test_ecb_dec[3][16] =$/;"	v	file:
aes_test_ecb_enc	src/aes.c	/^static const unsigned char aes_test_ecb_enc[3][16] =$/;"	v	file:
all_0	src/input.c	/^void all_0(uchar **input, FILE *data_i, bool file_type, int number, int arr_length)$/;"	f
all_1	src/input.c	/^void all_1(uchar **input, FILE *data_i, bool file_type, int number, int arr_length)$/;"	f
array_shift_bit_array_shift_h	include/array_shift.h	10;"	d
balance_counter	src/input.c	/^void balance_counter(uchar **input, FILE *data_i, int test_n,bool file_type,int total_blk)$/;"	f
buf	include/aes.h	/^    uint32_t buf[68];           \/*!<  unaligned data    *\/$/;"	m	struct:__anon1
buf	include/aes.h	/^    uint32_t buf[68];           \/*!<  unaligned data    *\/$/;"	m	struct:__anon2
cipher	src/cipher.c	/^void cipher(aes_context ctx,uchar **dst, uchar ** src, FILE *cipher_o, bool file_type)$/;"	f
cipher_short	src/cipher.c	/^void cipher_short(aes_context ctx,uchar **dst, uchar ** src, FILE *cipher_o,bool file_type)$/;"	f
ciphertext_dir_csv	src/run.c	33;"	d	file:
ciphertext_dir_txt	src/run.c	30;"	d	file:
complex_count	src/input.c	/^void complex_count(uchar **input, int test_n, FILE *data_i,bool file_type,uint *random)$/;"	f
count	src/input.c	/^void count(uchar **input, int test_n, FILE *data_i, bool file_type)$/;"	f
counter_normal	src/input.c	/^void counter_normal(uchar **input, $/;"	f
data_dir_csv	src/run.c	32;"	d	file:
data_dir_txt	src/run.c	29;"	d	file:
debug	src/shuffle.c	/^void debug(unsigned int x)$/;"	f
displayFileFormat	src/run.c	/^bool displayFileFormat()$/;"	f
displayInputOption	src/run.c	/^int displayInputOption()$/;"	f
equal_input	src/input.c	/^void equal_input(uchar **input, FILE *data_i, bool file_type)$/;"	f
index1	src/shuffle.c	/^	uint index1:2;\/\/block number 1$/;"	m	struct:split	file:
index2	src/shuffle.c	/^	uint index2:2;\/\/block number 2$/;"	m	struct:split	file:
int32_t	include/padlock.h	/^typedef INT32 int32_t;$/;"	t
length	src/shuffle.c	/^	uint length:5;\/\/segsize$/;"	m	struct:split	file:
linear_counter	src/input.c	/^void linear_counter(uchar **input, int test_n, bool file_type, FILE *data_i, int number, int arr_length)$/;"	f
main	src/run.c	/^int main()$/;"	f
nonce_dir_csv	include/CETD.h	33;"	d
nonce_dir_txt	include/CETD.h	27;"	d
nr	include/aes.h	/^    int nr;                     \/*!<  number of rounds  *\/$/;"	m	struct:__anon1
nr	include/aes.h	/^    int nr;                     \/*!<  number of rounds  *\/$/;"	m	struct:__anon2
offset1	src/shuffle.c	/^    uint offset1:5;\/\/start position for block1$/;"	m	struct:split	file:
offset2	src/shuffle.c	/^	uint offset2:5;\/\/start position for block2$/;"	m	struct:split	file:
only_plaintext	src/cipher.c	/^void only_plaintext(uchar **dst, const uchar **src, int number, int arr_length, FILE *cipher_o,bool file_type)$/;"	f
padlock_supports	src/padlock.c	/^int padlock_supports( int feature )$/;"	f
padlock_xcryptcbc	src/padlock.c	/^int padlock_xcryptcbc( aes_context *ctx,$/;"	f
padlock_xcryptecb	src/padlock.c	/^int padlock_xcryptecb( aes_context *ctx,$/;"	f
permutation	src/permutation.c	/^void permutation(int s, uchar **data, int number, int arr_length)$/;"	f
perodic_cipher	src/cipher.c	/^void perodic_cipher(aes_context ctx,uchar **dst, uchar ** src, FILE *cipher_o,int index,bool file_type)$/;"	f
perodic_input	src/input.c	/^void perodic_input(uchar **input, FILE *data_i,int index,bool file_type)$/;"	f
print_binary	src/shuffle.c	/^static void print_binary(unsigned int x)$/;"	f	file:
random_input	src/input.c	/^void random_input(uchar **input, const uchar **rnd,FILE *data_i, bool file_type, int number, int arr_length)$/;"	f
random_repeat_long	src/input.c	/^void random_repeat_long(uchar **input, const uchar *rnd,FILE *data_i,  bool file_type, int number, int arr_length)$/;"	f
random_repeat_short	src/input.c	/^void random_repeat_short(uchar **input, FILE *data_i, int rand_num, bool file_type)$/;"	f
reserved	src/shuffle.c	/^	uint reserved:13;$/;"	m	struct:split	file:
rk	include/aes.h	/^    uint32_t *rk;               \/*!<  AES round keys    *\/$/;"	m	struct:__anon1
rk	include/aes.h	/^    uint32_t *rk;               \/*!<  AES round keys    *\/$/;"	m	struct:__anon2
shift_p	src/permutation.c	/^void shift_p(uchar *nonce, int *s,int r)$/;"	f
shiftl	src/array_shift.c	/^void shiftl(void *object, size_t size)$/;"	f
shiftr	src/array_shift.c	/^void shiftr(void *object, size_t size, int n)$/;"	f
shiftrr	src/array_shift.c	/^void shiftrr(void *object, size_t size, int n)$/;"	f
shiftrrn	src/array_shift.c	/^void shiftrrn(void *object, size_t size, int n)$/;"	f
show	src/show.c	/^void show(const void *object, size_t size)$/;"	f
shuffle_p	src/shuffle.c	/^void shuffle_p(uchar *nonce, uint *v, int r)$/;"	f
split	src/shuffle.c	/^struct split {$/;"	s	file:
split_test	src/shuffle.c	/^void split_test(uint x)$/;"	f
swap	src/shuffle.c	/^void swap(uchar *nonce, uchar **data, int r, int number, int arr_length)$/;"	f
tag_dir_csv	include/CETD.h	32;"	d
tag_dir_txt	include/CETD.h	26;"	d
tag_gene	src/tag.c	/^void tag_gene(const uchar **data, uchar *tag, int number, int arr_length)$/;"	f
uchar	include/config.h	13;"	d
uint	include/config.h	15;"	d
uint32_t	include/aes.h	/^typedef UINT32 uint32_t;$/;"	t
ushort	include/config.h	14;"	d
write_csv_1array	src/write_csv.c	/^ void write_csv_1array(FILE *dst, int length, const uchar *array)$/;"	f
write_csv_2array	src/write_csv.c	/^void write_csv_2array(FILE *dst, int number, int length, const uchar **array)$/;"	f
write_csv_2array2	src/write_csv.c	/^void write_csv_2array2(FILE *dst, int num, int len, const uchar *array)$/;"	f
write_txt_1array	src/write_txt.c	/^void write_txt_1array(FILE *dst,  int length, const uchar *array)$/;"	f
write_txt_2array	src/write_txt.c	/^void write_txt_2array(FILE *dst, int number, int length, const uchar **array)$/;"	f
write_txt_2array2	src/write_txt.c	/^void write_txt_2array2(FILE *dst, int num, int len, const uchar *array)$/;"	f
x_dir_csv	include/CETD.h	29;"	d
x_dir_txt	include/CETD.h	23;"	d
y1_dir_split_csv	include/CETD.h	30;"	d
y1_dir_split_txt	include/CETD.h	24;"	d
y2_dir_split_csv	include/CETD.h	31;"	d
y2_dir_split_txt	include/CETD.h	25;"	d
